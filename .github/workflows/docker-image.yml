name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  validate-services:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout do repositório
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configurar Java (com Gradle)
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'  # Altere para a versão do Java que você está usando
          distribution: 'temurin'  # Ou 'corretto', 'zulu', etc.

      # 3. Instalar Docker
      - name: Install Docker
        run: |
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh

      # 4. Instalar Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # 5. Buildar Order Service com Gradle
      - name: Build application with Gradle
        run: |
          cd ./order-service/  # Entra no diretório do projeto
          chmod +x ./gradlew    # Dá permissão de execução ao gradlew
          ./gradlew build -x test  # Executa o build do Gradle, ignorando os testes
          cd ..

      # 5.1 Buildar a Product Validation Service com Gradle
      - name: Build application with Gradle
        run: |
          cd ./product-validation-service/  # Entra no diretório do projeto
          chmod +x ./gradlew    # Dá permissão de execução ao gradlew
          ./gradlew build -x test  # Executa o build do Gradle, ignorando os testes
          cd ..

      # 6. Iniciar os serviços com docker-compose
      - name: Start services with docker-compose
        run: |
          docker-compose -f docker-compose.yml up --build -d

      # 7. Verificar se o MongoDB está acessível
      - name: Check MongoDB connection
        run: |
          echo "Waiting for MongoDB to start..."
          sleep 10  # Espera 10 segundos para o MongoDB inicializar
          docker-compose exec order-db mongosh mongodb://admin:123456@order-db:27017 --eval "db.runCommand({ ping: 1 })"

      # 8. Verificar se o order-service está respondendo
      - name: Check order-service health
        run: |
          response=$(curl --retry 5 --retry-delay 10 --retry-all-errors -s http://localhost:3000/actuator/health)
          status=$(echo $response | jq -r '.status')
          if [ "$status" != "UP" ]; then
            echo "Health check failed: Status is not UP"
            exit 1
          else
            echo "Health check passed: Status is UP"
          fi

      # 9. Verificar se os tópicos Kafka foram criados
      - name: Check Kafka topics
        run: |
          echo "Verifying Kafka topics..."
          docker exec kafka /opt/kafka/bin/kafka-topics.sh --list --bootstrap-server localhost:9092
          echo "Expected topics: notify-ending, start-saga"
      
      # 10. Verificar se os tópicos Kafka foram criados
      - name: Check Kafka topics
        run: |
          echo "Verifying Kafka topics..."
          topics=$(docker exec kafka /opt/kafka/bin/kafka-topics.sh --list --bootstrap-server localhost:9092)
          echo "Found topics: $topics"

          # Verifica se os tópicos esperados estão presentes
          if echo "$topics" | grep -q "notify-ending" && 
             echo "$topics" | grep -q "start-saga" &&
             echo "$topics" | grep -q "product-validation-success" &&
             echo "$topics" | grep -q "product-validation-fail"; then
            echo "All expected topics were created."
          else
            echo "Error: Expected topics not found!"
            exit 1
          fi
      

      # 11. Verificar se a tabela foi criada e contém os valores padrão
      - name: Verify table and default values in PostgreSQL
        run: |
          echo "Verifying table and default values..."
          # Executa a consulta SQL para verificar a tabela
          OUTPUT=$(docker-compose exec product-db psql -U postgres -d product-db -c "SELECT * FROM product;" -t)
          echo "Query result: $OUTPUT"
          
          # Verifica se o valor padrão está presente
          if echo "$OUTPUT" | grep -q "COMIC_BOOKS" &&
             echo "$OUTPUT" | grep -q "BOOKS" &&
             echo "$OUTPUT" | grep -q "MOVIES" &&
             echo "$OUTPUT" | grep -q "MUSIC"; then
            echo "Table exists and contains default values!"
          else
            echo "Error: Table or default values are missing!"
            exit 1
          fi  

      # 12 Parar e remover os containers após a validação
      - name: Stop and remove containers
        if: always()
        run: |
          docker-compose down
