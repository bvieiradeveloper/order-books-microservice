name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  DEV:
    runs-on: ubuntu-latest
    environment: DEV
    
    env:
      MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
      MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
      MONGO_DB_URI: ${{ secrets.MONGO_DB_URI }}
      KAFKA_BROKER: ${{ secrets.KAFKA_BROKER }}
      POSTGRES_PRODUCT_DB_USER: ${{ secrets.POSTGRES_PRODUCT_DB_USER }}
      POSTGRES_PRODUCT_DB_PASSWORD: ${{ secrets.POSTGRES_PRODUCT_DB_PASSWORD }}
      POSTGRES_PRODUCT_DB_HOST: ${{ secrets.POSTGRES_PRODUCT_DB_HOST }}
      POSTGRES_PRODUCT_DB_PORT: ${{ secrets.POSTGRES_PRODUCT_DB_PORT }}
      POSTGRES_PAYMENT_DB_USER: ${{ secrets.POSTGRES_PAYMENT_DB_USER }}
      POSTGRES_PAYMENT_DB_PASSWORD: ${{ secrets.POSTGRES_PAYMENT_DB_PASSWORD }}
      POSTGRES_PAYMENT_DB_HOST: ${{ secrets.POSTGRES_PAYMENT_DB_HOST }}
      POSTGRES_PAYMENT_DB_PORT: ${{ secrets.POSTGRES_PAYMENT_DB_PORT }}
      POSTGRES_INVENTORY_DB_USER: ${{ secrets.POSTGRES_INVENTORY_DB_USER }}
      POSTGRES_INVENTORY_DB_PASSWORD: ${{ secrets.POSTGRES_INVENTORY_DB_PASSWORD }}
      POSTGRES_INVENTORY_DB_HOST: ${{ secrets.POSTGRES_INVENTORY_DB_HOST }}
      POSTGRES_INVENTORY_DB_PORT: ${{ secrets.POSTGRES_INVENTORY_DB_PORT }}
      POSTGRES_PRODUCT_DB_NAME: ${{ secrets.POSTGRES_PRODUCT_DB_NAME }}
      POSTGRES_PAYMENT_DB_NAME: ${{ secrets.POSTGRES_PAYMENT_DB_NAME }}
      POSTGRES_INVENTORY_DB_NAME: ${{ secrets.POSTGRES_INVENTORY_DB_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'  # Altere para a versão do Java que você está usando
          distribution: 'corretto'  # Ou 'corretto', 'zulu', etc.

      - name: Install Docker
        run: |
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Build order-service with Gradle
        run: |
          cd ./order-service/
          chmod +x ./gradlew
          ./gradlew build -x test
          cd ..

      - name: Build orchestrator-service with Gradle
        run: |
          cd ./orchestrator-service/
          chmod +x ./gradlew
          ./gradlew build -x test
          cd ..

      - name: Build product-validation-service with Gradle
        run: |
          cd ./product-validation-service/
          chmod +x ./gradlew
          ./gradlew build -x test
          cd ..

      - name: Build payment-service with Gradle
        run: |
          cd ./payment-service/
          chmod +x ./gradlew
          ./gradlew build -x test
          cd ..

      - name: Build inventory-service with Gradle
        run: |
          cd ./inventory-service/
          chmod +x ./gradlew
          ./gradlew build -x test
          cd ..

      - name: Start services with docker-compose
        run: |
          docker-compose -f docker-compose.yml up --build -d

      - name: Check MongoDB connection
        run: |
          echo "Waiting for MongoDB to start..."
          sleep 10
          docker-compose exec order-db mongosh "mongodb://$MONGO_INITDB_ROOT_USERNAME:$MONGO_INITDB_ROOT_PASSWORD@order-db:27017" --eval "db.runCommand({ ping: 1 })"

      - name: Check order-service health
        run: |
          response=$(curl --retry 5 --retry-delay 10 --retry-all-errors -s http://localhost:3000/actuator/health)
          status=$(echo $response | jq -r '.status')
          if [ "$status" != "UP" ]; then
            echo "Health check failed: Status is not UP"
            exit 1
          else
            echo "Health check passed: Status is UP"
          fi

      - name: Check Kafka topics
        run: |
          echo "Verifying Kafka topics..."
          topics=$(docker exec kafka /opt/kafka/bin/kafka-topics.sh --list --bootstrap-server kafka:29092)
          echo "Found topics: $topics"

          if echo "$topics" | grep -q "notify-ending" &&
             echo "$topics" | grep -q "start-saga" &&
             echo "$topics" | grep -q "product-validation-success" &&
             echo "$topics" | grep -q "product-validation-fail" &&
             echo "$topics" | grep -q "payment-fail" &&
             echo "$topics" | grep -q "payment-success" &&
             echo "$topics" | grep -q "inventory-fail" &&
             echo "$topics" | grep -q "inventory-success" &&
             echo "$topics" | grep -q "finish-fail" &&
             echo "$topics" | grep -q "finish-success" &&
             echo "$topics" | grep -q "orchestrator" &&
             echo "$topics" | grep -q "notify-ending"; then
            echo "All expected topics were created."
          else
            echo "Error: Expected topics not found!"
            exit 1
          fi

      - name: Verify table and default values in PostgreSQL
        run: |
          echo "Verifying table and default values..."
          # Executa a consulta SQL para verificar a tabela
          OUTPUT_A=$(docker-compose exec product-db psql -U postgres -d product-db -c "SELECT * FROM product;" -t)
          OUTPUT_B=$(docker-compose exec inventory-db psql -U postgres -d inventory-db -c "SELECT * FROM inventory;" -t)
          echo "Query result: $OUTPUT_A"
          echo "Query result: $OUTPUT_B"

          if echo "$OUTPUT_A" | grep -q "COMIC_BOOKS" &&
             echo "$OUTPUT_A" | grep -q "BOOKS" &&
             echo "$OUTPUT_A" | grep -q "MOVIES" &&
             echo "$OUTPUT_A" | grep -q "MUSIC"; then
            echo "Table exists and contains default values!"
          else
            echo "Error: Table or default values are missing!"
            exit 1
          fi

          if echo "$OUTPUT_B" | grep -q "COMIC_BOOKS" &&
             echo "$OUTPUT_B" | grep -q "BOOKS" &&
             echo "$OUTPUT_B" | grep -q "MOVIES" &&
             echo "$OUTPUT_B" | grep -q "MUSIC"; then
            echo "Table exists and contains default values!"
          else
            echo "Error: Table or default values are missing!"
            exit 1
          fi

      - name: Stop and remove containers
        if: always()
        run: |
          docker-compose down
