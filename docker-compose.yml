services:
  order-db:
    ports:
      - '27017:27017'
    container_name: order-db
    restart: always
    networks:
      - orchestrator-saga
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=123456
    image: mongo:latest

  kafka:
    container_name: kafka
    image: obsidiandynamics/kafka
    restart: "no"
    ports:
      - "2181:2181"
      - "9092:9092"
    networks:
      - orchestrator-saga
    environment:
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
    healthcheck:
      test: [
        "CMD-SHELL",
        "sleep 3s && /opt/kafka/bin/kafka-topics.sh --list --bootstrap-server kafka:9092 && echo 'Kafka is ready' || exit 1"
      ]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - ./data/kafka/data:/var/lib/kafka/data

  order-service:
    build: './order-service'
    container_name: order-service
    depends_on:
      kafka:
        condition: service_healthy
      order-db:
        condition: service_started
    networks:
      - orchestrator-saga
    environment:
      - MONGO_DB_URI=mongodb://admin:123456@order-db:27017
      - KAFKA_BROKER=kafka:29092
    ports:
      - 3000:3000

networks:
  orchestrator-saga:
    driver: bridge